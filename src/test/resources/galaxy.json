{
  "openapi": "3.0.1",
  "info": {
    "title": "Starburst Galaxy Public API",
    "description": "# Access Tokens\n\nAccess tokens are obtained using the OAuth2 credentials flow and API authentication tokens.\n\n1. Create an API authentication token at `https://{account-domain}/%s`\n2. Use the API authentication token to obtain a temporary access token by POST to `https://{account-domain}/oauth/v2/token`. The request must have a Basic Authorization header with the client ID and secret Base64 encoded in the form `clientId:clientSecret`. The request body must be `grant_type=client_credentials`.\n\n`cURL` example:\n\n```\ncurl -X POST \\\n  -H 'Authorization: Basic {base64(clientId:clientSecret)}' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'grant_type=client_credentials' \\\n  https://{account-domain}/oauth/v2/token\n```\n\nThe access token returned can be used to make API calls with the header `Authorization: Bearer {access token}`.\n",
    "version": "v1"
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "tags": [
    {
      "name": "Cluster Service",
      "description": "Cluster related operations"
    },
    {
      "name": "User Service",
      "description": "User related operations"
    },
    {
      "name": "Role Service",
      "description": "Role related operations"
    },
    {
      "name": "Privilege Service",
      "description": "List, grant and revoke role privileges"
    },
    {
      "name": "SchemaDiscovery Service",
      "description": "Schema discovery related operations"
    },
    {
      "name": "Catalog Service",
      "description": "Catalog related operations"
    },
    {
      "name": "Discovery Service",
      "description": "Catalog data discovery operations"
    },
    {
      "name": "Tag Service",
      "description": "Tag related operations"
    },
    {
      "name": "RowFilter Service",
      "description": "Row filter related operations"
    },
    {
      "name": "ServiceAccount Service",
      "description": "Service account related operations"
    },
    {
      "name": "ColumnMask Service",
      "description": "Column mask related operations"
    },
    {
      "name": "Policy Service",
      "description": "Policy related operatios"
    }
  ],
  "paths": {
    "/public/api/v1/cluster/{clusterId}:start": {
      "post": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Start or resume a cluster - DEPRECATED - You can start/enable a cluster by patching the cluster enabled field with a true value - New Implementation: public/api/v1/cluster/{clusterId}",
        "operationId": "startCluster",
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "A Trino cluster",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/public/api/v1/catalog": {
      "get": {
        "tags": [
          "Catalog Service"
        ],
        "description": "List an account's catalog identifiers\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listCatalog",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schema": {
      "get": {
        "tags": [
          "Discovery Service"
        ],
        "description": "Return a catalog's schemas along with any Galaxy added metadata\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listSchemaOfCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/catalogMetadata": {
      "get": {
        "tags": [
          "Discovery Service"
        ],
        "description": "Return catalog metadata with any Galaxy added metadata\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getCatalogMetadataOfCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogMetadata"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/columnMask": {
      "get": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Return all column masks defined for your account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listColumnMask",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnMaskPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Create a column mask\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createColumnMask",
        "parameters": [
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewColumnMask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnMask"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/serviceAccount/{serviceAccountId}/serviceAccountPassword": {
      "post": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Create a new service account password\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createServiceAccountPasswordOfServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewServiceAccountPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountPassword"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/serviceAccount/{serviceAccountId}/serviceAccountPassword/{serviceAccountPasswordId}": {
      "delete": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Delete a service account password\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteServiceAccountOfServiceAccountPassword",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceAccountPasswordId",
            "description": "A service account password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schema/{schemaId}/table": {
      "get": {
        "tags": [
          "Discovery Service"
        ],
        "description": "Return a catalog schema's tables along with any Galaxy added metadata\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listTableOfCatalogSchema",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TablePaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/serviceAccount/{serviceAccountId}": {
      "get": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Get a service account by user id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Delete a service account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Update a service account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceAccountPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/user": {
      "get": {
        "tags": [
          "User Service"
        ],
        "description": "Return a list of users\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listUser",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/schemaDiscovery/{schemaDiscoveryId}": {
      "get": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Get schema discovery by id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getSchemaDiscovery",
        "parameters": [
          {
            "in": "path",
            "name": "schemaDiscoveryId",
            "description": "A schema discovery run",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}": {
      "get": {
        "tags": [
          "Role Service"
        ],
        "description": "Get information about a role\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "A role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role Service"
        ],
        "description": "Delete a role\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "A role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Role Service"
        ],
        "description": "Grant and revoke roles\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "A role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRoleGrantsPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}:revoke": {
      "post": {
        "tags": [
          "Privilege Service"
        ],
        "description": "Revoke a privilege from a role\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "revokePrivilegeOfRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "A role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokePrivilege"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}:grant": {
      "post": {
        "tags": [
          "Privilege Service"
        ],
        "description": "Grant a privilege to a role\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "grantPrivilegeOfRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "A role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantPrivilege"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}/privilege": {
      "get": {
        "tags": [
          "Privilege Service"
        ],
        "description": "List all privileges granted to a role\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listPrivilegeOfRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "A role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          },
          {
            "in": "query",
            "name": "listAllPrivileges",
            "description": "",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivilegePaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/cluster/{clusterId}": {
      "get": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Get cluster by id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getCluster",
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "A Trino cluster",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Delete a cluster\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "A Trino cluster",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Update a cluster\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateCluster",
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "A Trino cluster",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClusterConfigurationPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/schemaDiscovery/{schemaDiscoveryId}:apply": {
      "post": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Execute SQL statements generated by schema discovery\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "applySchemaDiscovery",
        "parameters": [
          {
            "in": "path",
            "name": "schemaDiscoveryId",
            "description": "A schema discovery run",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}/catalog/{catalogId}": {
      "put": {
        "tags": [
          "Tag Service"
        ],
        "description": "Apply a tag to a catalog\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "updateTagOfCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Revoke a tag applied to a catalog\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteTagOfCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/user/{userId}": {
      "get": {
        "tags": [
          "User Service"
        ],
        "description": "Get a user\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "A user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "User Service"
        ],
        "description": "Grant and revoke user roles\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "A user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleGrantsPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}/catalog/{catalogId}/schema/{schemaId}": {
      "put": {
        "tags": [
          "Tag Service"
        ],
        "description": "Apply a tag to a schema\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "updateTagOfCatalogSchema",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Revoke a tag applied to a schema\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteTagOfCatalogSchema",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}/catalog/{catalogId}/schema/{schemaId}/table/{tableId}": {
      "put": {
        "tags": [
          "Tag Service"
        ],
        "description": "Apply a tag to a table\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "updateTagOfCatalogSchemaTable",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Revoke a tag applied to a table\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteTagOfCatalogSchemaTable",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/cluster": {
      "get": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Return the clusters of your account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listCluster",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Create a cluster\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createCluster",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClusterConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400": {
            "description": "FailedPrecondition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailure"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}/rolegrant": {
      "get": {
        "tags": [
          "Role Service"
        ],
        "description": "List entities assigned to a role\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listRolegrantOfRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "A role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Query filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleGrantPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/rowFilter": {
      "get": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Return all row filters defined for your account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listRowFilter",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowFilterPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Create a row filter\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createRowFilter",
        "parameters": [
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRowFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowFilter"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/columnMask/{columnMaskId}": {
      "get": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Get a column mask by id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getColumnMask",
        "parameters": [
          {
            "in": "path",
            "name": "columnMaskId",
            "description": "A column mask",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnMask"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Delete a column mask\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteColumnMask",
        "parameters": [
          {
            "in": "path",
            "name": "columnMaskId",
            "description": "A column mask",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Update a column mask\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateColumnMask",
        "parameters": [
          {
            "in": "path",
            "name": "columnMaskId",
            "description": "A column mask",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateColumnMaskPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnMask"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/rowFilter/{rowFilterId}": {
      "get": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Get a row filter by id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getRowFilter",
        "parameters": [
          {
            "in": "path",
            "name": "rowFilterId",
            "description": "A row filter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowFilter"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Delete a row filter\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteRowFilter",
        "parameters": [
          {
            "in": "path",
            "name": "rowFilterId",
            "description": "A row filter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Update a row filter\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateRowFilter",
        "parameters": [
          {
            "in": "path",
            "name": "rowFilterId",
            "description": "A row filter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRowFilterPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowFilter"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}": {
      "get": {
        "tags": [
          "Tag Service"
        ],
        "description": "Get a tag by id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Delete a tag\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tag Service"
        ],
        "description": "Update a tag\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schema/{schemaId}/table/{tableId}/column": {
      "get": {
        "tags": [
          "Discovery Service"
        ],
        "description": "Return a catalog table's columns along with any Galaxy added metadata\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listColumnOfCatalogSchemaTable",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/policy": {
      "get": {
        "tags": [
          "Policy Service"
        ],
        "description": "Return all policies defined for your account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listPolicy",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          },
          {
            "in": "query",
            "name": "enablingRoleId",
            "description": "Query filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Policy Service"
        ],
        "description": "Create a policy\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createPolicy",
        "parameters": [
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}/catalog/{catalogId}/schema/{schemaId}/table/{tableId}/column/{columnId}": {
      "put": {
        "tags": [
          "Tag Service"
        ],
        "description": "Apply a tag to a column\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "updateTagOfCatalogSchemaTableColumn",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "columnId",
            "description": "A column from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Revoke a tag applied to a column\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deleteTagOfCatalogSchemaTableColumn",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "A tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "columnId",
            "description": "A column from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/cluster/{clusterId}:stop": {
      "post": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Stop a cluster - DEPRECATED - You can stop/disable a cluster by patching the cluster enabled field with a false value - New Implementation: public/api/v1/cluster/{clusterId}",
        "operationId": "stopCluster",
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "A Trino cluster",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/public/api/v1/tag": {
      "get": {
        "tags": [
          "Tag Service"
        ],
        "description": "Return all tags defined for your account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listTag",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tag Service"
        ],
        "description": "Create a tag\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createTag",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/policy/{policyId}": {
      "get": {
        "tags": [
          "Policy Service"
        ],
        "description": "Get a policy by id\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "getPolicy",
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "A policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Policy Service"
        ],
        "description": "Delete a policy\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "A policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Policy Service"
        ],
        "description": "Update a policy\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdatePolicy",
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "A policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/serviceAccount": {
      "get": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Return all service accounts defined for your account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listServiceAccount",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Create a service account\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createServiceAccount",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewServiceAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role": {
      "get": {
        "tags": [
          "Role Service"
        ],
        "description": "Return a list of roles\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listRole",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role Service"
        ],
        "description": "Create a role\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createRole",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schemaDiscovery": {
      "get": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Get schema discoveries for catalog. When getting all runs, they won't contain same level of detail as when getting run by its ID.\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "listSchemaDiscoveryOfCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "latest",
            "description": "",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDiscoveryPaginated"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Run schema discovery under catalog, for specified uri\n\n**BETA API:** This API is subject to incompatible changes, or even removal, in the future.",
        "operationId": "createSchemaDiscoveryOfCatalog",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "A catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunSchemaDiscovery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInfo"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "accessToken": {
        "type": "http",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "Access token"
      }
    },
    "schemas": {
      "UpdateUserRoleGrantsPatch": {
        "description": "Grant or revoke user roles"
      },
      "RunSchemaDiscovery": {
        "required": [
          "options",
          "skipApplying",
          "uri"
        ],
        "properties": {
          "uri": {
            "type": "string",
            "description": "Root uri, that schema discovery will start from. Current role must have location security correctly set up. (read only)"
          },
          "defaultSchemaName": {
            "type": "string",
            "description": "Schema name that will be used for top-level tables, which aren't under any schema (read only)"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Configuration options for schema discovery (read only)"
            }
          },
          "skipApplying": {
            "type": "boolean",
            "description": "Do not apply schema discovery results to catalog, useful if tables needs to be inspected manually before running SQLs (read only)",
            "nullable": false
          }
        },
        "description": "Run schema discovery"
      },
      "TagPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "BadRequest": {
        "required": [
          "fieldViolations"
        ],
        "properties": {
          "fieldViolations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldViolation"
            }
          }
        },
        "description": "Invalid request (read only)"
      },
      "ColumnMaskPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/ColumnMask"
            }
          }
        }
      },
      "RoleIdAndName": {
        "required": [
          "roleId",
          "roleName"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "description": "Role ID (read only)"
          },
          "roleName": {
            "type": "string",
            "description": "Role name (read only)"
          }
        },
        "description": "The role that owns this schema (read only)"
      },
      "ServiceAccount": {
        "required": [
          "additionalRoleIds",
          "passwords",
          "roleId",
          "serviceAccountId",
          "syncToken",
          "userName"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "serviceAccountId": {
            "type": "string",
            "description": "Service account ID (read only)"
          },
          "userName": {
            "type": "string",
            "description": "Service account user name (read only)"
          },
          "roleId": {
            "type": "string",
            "description": "Default role (read only)"
          },
          "additionalRoleIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Additional roles (read only)"
            }
          },
          "passwords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAccountPassword"
            }
          }
        },
        "description": "A service account"
      },
      "RolePaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "CatalogPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Catalog"
            }
          }
        }
      },
      "NewServiceAccount": {
        "required": [
          "additionalRoles",
          "username",
          "withInitialPassword"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Service account name (read only)"
          },
          "roleId": {
            "type": "string",
            "description": "Default role ID (read only)"
          },
          "additionalRoles": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Additional role IDs (read only)"
            }
          },
          "withInitialPassword": {
            "type": "boolean",
            "description": "Whether to create an initial password (read only)",
            "nullable": false
          }
        },
        "description": "A service account"
      },
      "CreateClusterConfiguration": {
        "required": [
          "catalogRefs",
          "cloudRegionId",
          "maxWorkers",
          "minWorkers",
          "name",
          "resultCacheEnabled",
          "warpResiliencyEnabled"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the cluster being created"
          },
          "cloudRegionId": {
            "type": "string",
            "description": "Cloud region ID of where the cluster will be created"
          },
          "catalogRefs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Catalog IDs to attach to the cluster"
            }
          },
          "idleStopMinutes": {
            "format": "int32",
            "type": "integer",
            "description": "Idle suspend duration (in minutes)",
            "nullable": false
          },
          "processingMode": {
            "type": "string",
            "description": "Cluster query processing mode",
            "enum": [
              "BATCH",
              "WARP_SPEED"
            ]
          },
          "minWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Minimum worker count",
            "nullable": false
          },
          "maxWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Maximum worker count",
            "nullable": false
          },
          "warpResiliencyEnabled": {
            "type": "boolean",
            "description": "Enable/Disable warp resiliency",
            "nullable": false
          },
          "resultCacheEnabled": {
            "type": "boolean",
            "description": "Enable/Disable resultset caching",
            "nullable": false
          },
          "resultCacheDefaultVisibilitySeconds": {
            "format": "int64",
            "type": "integer",
            "description": "Default visibility for resultset caching (in seconds)",
            "nullable": false
          }
        },
        "description": "Create a Trino cluster"
      },
      "GrantPrivilege": {
        "required": [
          "entityId",
          "entityKind",
          "grantKind",
          "grantOption",
          "privilege"
        ],
        "properties": {
          "grantKind": {
            "type": "string",
            "description": "Grant kind",
            "enum": [
              "Allow",
              "Deny"
            ]
          },
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "grantOption": {
            "type": "boolean",
            "description": "Grant option",
            "nullable": false
          },
          "privilege": {
            "type": "string",
            "description": "Privilege"
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name"
          },
          "tableName": {
            "type": "string",
            "description": "Table name"
          },
          "columnName": {
            "type": "string",
            "description": "Column name"
          }
        },
        "description": "A role privilege to grant"
      },
      "ServiceAccountPassword": {
        "required": [
          "created",
          "passwordPrefix",
          "serviceAccountPasswordId",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "serviceAccountPasswordId": {
            "type": "string",
            "description": "Service account password ID (read only)"
          },
          "passwordPrefix": {
            "type": "string",
            "description": "Service account password prefix (read only)"
          },
          "password": {
            "type": "string",
            "description": "Service account password (read only)"
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Creation time (read only)"
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string",
            "description": "Last login time (read only)"
          }
        },
        "description": "Passwords (read only)"
      },
      "ColumnPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          }
        }
      },
      "Policy": {
        "required": [
          "created",
          "description",
          "modified",
          "name",
          "policyId",
          "predicate",
          "roleId",
          "scopes",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "policyId": {
            "type": "string",
            "description": "Policy ID (read only)"
          },
          "roleId": {
            "type": "string",
            "description": "Enabling role ID"
          },
          "name": {
            "type": "string",
            "description": "Policy name"
          },
          "predicate": {
            "type": "string",
            "description": "Policy predicate"
          },
          "description": {
            "type": "string",
            "description": "Policy description"
          },
          "expiration": {
            "format": "date-time",
            "type": "string",
            "description": "Policy expiration"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyScope"
            }
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Created on (read only)"
          },
          "modified": {
            "format": "date-time",
            "type": "string",
            "description": "Modified on (read only)"
          }
        },
        "description": "A policy"
      },
      "UserPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UpdateServiceAccountPatch": {
        "properties": {
          "roleId": {
            "type": "string",
            "description": "Default role ID"
          },
          "additionalRoleIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Additional roles"
            }
          }
        },
        "description": "Update a service account"
      },
      "NewRowFilter": {
        "required": [
          "description",
          "expression",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Row filter name (read only)"
          },
          "expression": {
            "type": "string",
            "description": "Row filter expression (read only)"
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          }
        },
        "description": "A new row filter"
      },
      "NewColumnMask": {
        "required": [
          "columnMaskType",
          "description",
          "expression",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Column mask name (read only)"
          },
          "expression": {
            "type": "string",
            "description": "Column mask expression (read only)"
          },
          "columnMaskType": {
            "type": "string",
            "description": "Column mask type (read only)",
            "enum": [
              "Any",
              "Integer",
              "Boolean",
              "Date",
              "Decimal",
              "Real",
              "Double",
              "Timestamp",
              "TimestampWithTimeZone",
              "Time",
              "TimeWithTimeZone",
              "Varbinary",
              "Varchar"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          }
        },
        "description": "A new column mask"
      },
      "SchemaDiscovery": {
        "required": [
          "catalogId",
          "createdAt",
          "createdTablesCount",
          "defaultSchemaName",
          "deletedTablesCount",
          "errors",
          "options",
          "schemaDiscoveryId",
          "sqlStatements",
          "status",
          "syncToken",
          "updatedTablesCount",
          "uri"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "schemaDiscoveryId": {
            "type": "string",
            "description": "Schema discovery ID (read only)"
          },
          "catalogId": {
            "type": "string",
            "description": "Catalog ID (read only)"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Time when schema discovery was created (read only)"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Time when schema discovery has started (read only)"
          },
          "finishedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Time when schema discovery has finished (read only)"
          },
          "uri": {
            "type": "string",
            "description": "Root location for schema discovery (read only)"
          },
          "defaultSchemaName": {
            "type": "string",
            "description": "Default schema name, used when tables without schemas were discovered (read only)"
          },
          "status": {
            "type": "string",
            "description": "Status of schema discovery (read only)",
            "enum": [
              "Scheduled",
              "Running",
              "Errored",
              "Success",
              "RescanScheduled",
              "RescanRunning",
              "ApplyScheduled",
              "ApplyRunning",
              "ApplyErrored",
              "ApplySuccess",
              "Deprecated"
            ]
          },
          "basedOn": {
            "type": "string",
            "description": "ID of schema discovery which this one is based on, in case of diff runs (read only)"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Errors that prevented schema discovery to finish (read only)"
            }
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Configuration options (read only)"
            }
          },
          "sqlStatements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscoveredSqlStatement"
            }
          },
          "createdTablesCount": {
            "format": "int32",
            "type": "integer",
            "description": "Number of tables to create (read only)",
            "nullable": false
          },
          "updatedTablesCount": {
            "format": "int32",
            "type": "integer",
            "description": "Number of tables to update (read only)",
            "nullable": false
          },
          "deletedTablesCount": {
            "format": "int32",
            "type": "integer",
            "description": "Number of tables to delete (read only)",
            "nullable": false
          }
        },
        "description": "A schema discovery run"
      },
      "RowFilterPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/RowFilter"
            }
          }
        }
      },
      "UpdateRowFilterPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Row filter name"
          },
          "expression": {
            "type": "string",
            "description": "Row filter expression"
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "description": "Update a row filter"
      },
      "ColumnMask": {
        "required": [
          "columnMaskId",
          "columnMaskType",
          "created",
          "description",
          "expression",
          "modified",
          "name",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "columnMaskId": {
            "type": "string",
            "description": "Column Mask ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Column Mask name (read only)"
          },
          "expression": {
            "type": "string",
            "description": "Column Mask expression (read only)"
          },
          "columnMaskType": {
            "type": "string",
            "description": "Column Mask type (read only)",
            "enum": [
              "Any",
              "Integer",
              "Boolean",
              "Date",
              "Decimal",
              "Real",
              "Double",
              "Timestamp",
              "TimestampWithTimeZone",
              "Time",
              "TimeWithTimeZone",
              "Varbinary",
              "Varchar"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Created on (read only)"
          },
          "modified": {
            "format": "date-time",
            "type": "string",
            "description": "Modified on (read only)"
          }
        },
        "description": "A column mask"
      },
      "Privilege": {
        "required": [
          "entityId",
          "entityKind",
          "grantKind",
          "grantOption",
          "privilege"
        ],
        "properties": {
          "grantKind": {
            "type": "string",
            "description": "Grant kind",
            "enum": [
              "Allow",
              "Deny"
            ]
          },
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "grantOption": {
            "type": "boolean",
            "description": "Grant option",
            "nullable": false
          },
          "privilege": {
            "type": "string",
            "description": "Privilege"
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name"
          },
          "tableName": {
            "type": "string",
            "description": "Table name"
          },
          "columnName": {
            "type": "string",
            "description": "Column name"
          }
        },
        "description": "A role privilege (read only)"
      },
      "UserAndEmail": {
        "required": [
          "email",
          "userId"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID (read only)"
          },
          "email": {
            "type": "string",
            "description": "User email (read only)"
          }
        },
        "description": "Any contacts set for this schema (read only)"
      },
      "ClusterPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Cluster"
            }
          }
        }
      },
      "DiscoveredSqlStatement": {
        "required": [
          "sql",
          "status"
        ],
        "properties": {
          "sql": {
            "type": "string",
            "description": "Raw generated SQL (read only)"
          },
          "status": {
            "type": "string",
            "description": "Status of the statement (read only)",
            "enum": [
              "Waiting",
              "Applying",
              "Success",
              "Errored",
              "Canceled"
            ]
          },
          "message": {
            "type": "string",
            "description": "Message describing statement or error message in case of execution failure (read only)"
          }
        },
        "description": "Generated SQL statements (read only)"
      },
      "UpdateClusterConfigurationPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the cluster being created"
          },
          "cloudRegionId": {
            "type": "string",
            "description": "Cloud region ID of where the cluster will be created"
          },
          "catalogRefs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Catalog IDs to attach to the cluster"
            }
          },
          "idleStopMinutes": {
            "format": "int32",
            "type": "integer",
            "description": "Idle suspend duration (in minutes)",
            "nullable": false
          },
          "processingMode": {
            "type": "string",
            "description": "Cluster query processing mode",
            "enum": [
              "BATCH",
              "WARP_SPEED"
            ]
          },
          "minWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Minimum worker count",
            "nullable": false
          },
          "maxWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Maximum worker count",
            "nullable": false
          },
          "warpResiliencyEnabled": {
            "type": "boolean",
            "description": "Enable/Disable warp resiliency",
            "nullable": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable/Disable a cluster",
            "nullable": false
          },
          "resultCacheEnabled": {
            "type": "boolean",
            "description": "Enable/Disable resultset caching",
            "nullable": false
          },
          "resultCacheDefaultVisibilitySeconds": {
            "format": "int64",
            "type": "integer",
            "description": "Default visibility for resultset caching (in seconds)",
            "nullable": false
          }
        },
        "description": "Update a Trino cluster"
      },
      "Tag": {
        "required": [
          "color",
          "name",
          "syncToken",
          "tagId"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "tagId": {
            "type": "string",
            "description": "Tag ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Tag name (read only)"
          },
          "color": {
            "type": "string",
            "description": "Tag color (read only)"
          },
          "description": {
            "type": "string",
            "description": "Comment (read only)"
          }
        },
        "description": "A tag"
      },
      "UpdateTagPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name"
          },
          "color": {
            "type": "string",
            "description": "Tag color"
          },
          "description": {
            "type": "string",
            "description": "comment"
          }
        },
        "description": "Update a tag"
      },
      "UpdateRoleRoleGrantsPatch": {
        "description": "Grant or revoke roles to roles"
      },
      "RevokePrivilege": {
        "required": [
          "entityId",
          "entityKind",
          "privilege",
          "revokeAction"
        ],
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "privilege": {
            "type": "string",
            "description": "Privilege"
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name"
          },
          "tableName": {
            "type": "string",
            "description": "Table name"
          },
          "columnName": {
            "type": "string",
            "description": "Column name"
          },
          "revokeAction": {
            "type": "string",
            "description": "Revoke grant option or remove role privilege",
            "enum": [
              "RevokeGrantOption",
              "RemoveRoleGrant"
            ]
          }
        },
        "description": "A role privilege to revoke"
      },
      "TagRepresentation": {
        "required": [
          "name",
          "tagId"
        ],
        "properties": {
          "tagId": {
            "type": "string",
            "description": "Tag ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Tag name (read only)"
          }
        },
        "description": "Any tags set for this schema (read only)"
      },
      "SchemaDiscoveryPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/SchemaDiscovery"
            }
          }
        }
      },
      "Violation": {
        "required": [
          "description",
          "subject",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Violation type",
            "enum": [
              "TermsOfService"
            ]
          },
          "subject": {
            "type": "string",
            "description": "Violation subject"
          },
          "description": {
            "type": "string",
            "description": "Violation description"
          }
        },
        "description": "Field violations (read only)"
      },
      "RoleGrantPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/RoleGrant"
            }
          }
        }
      },
      "ErrorInfo": {
        "required": [
          "metadata",
          "reason"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "description": "Error reason/detail (read only)"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Any additional details (read only)"
            }
          }
        },
        "description": "Error (read only)"
      },
      "UpdatePolicyPatch": {
        "properties": {
          "roleId": {
            "type": "string",
            "description": "Enabling role id"
          },
          "name": {
            "type": "string",
            "description": "Policy name"
          },
          "predicate": {
            "type": "string",
            "description": "Policy predicate"
          },
          "description": {
            "type": "string",
            "description": "Policy description"
          },
          "expiration": {
            "format": "date-time",
            "type": "string",
            "description": "Policy expiration"
          }
        },
        "description": "A new policy"
      },
      "CatalogMetadata": {
        "required": [
          "catalogId",
          "catalogName",
          "contacts",
          "tags"
        ],
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "Catalog ID (read only)"
          },
          "catalogName": {
            "type": "string",
            "description": "Catalog name (read only)"
          },
          "description": {
            "type": "string",
            "description": "Any description set for this catalog (read only)"
          },
          "owner": {
            "$ref": "#/components/schemas/RoleIdAndName"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRepresentation"
            }
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAndEmail"
            }
          }
        },
        "description": "A catalog (read only)"
      },
      "Schema": {
        "required": [
          "contacts",
          "links",
          "schemaId",
          "tags"
        ],
        "properties": {
          "schemaId": {
            "type": "string",
            "description": "Schema ID (read only)"
          },
          "description": {
            "type": "string",
            "description": "Any description set for this schema (read only)"
          },
          "owner": {
            "$ref": "#/components/schemas/RoleIdAndName"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRepresentation"
            }
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAndEmail"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "A schema from a catalog (read only)"
      },
      "Table": {
        "required": [
          "contacts",
          "tableId",
          "tags"
        ],
        "properties": {
          "tableId": {
            "type": "string",
            "description": "Table ID (read only)"
          },
          "tableType": {
            "type": "string",
            "description": "Any table type returned from the data source (read only)"
          },
          "description": {
            "type": "string",
            "description": "Any description set for this table (read only)"
          },
          "owner": {
            "$ref": "#/components/schemas/RoleIdAndName"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRepresentation"
            }
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAndEmail"
            }
          }
        },
        "description": "A table from a catalog (read only)"
      },
      "TablePaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          }
        }
      },
      "Column": {
        "required": [
          "columnId",
          "nullable",
          "tags"
        ],
        "properties": {
          "columnId": {
            "type": "string",
            "description": "Column ID (read only)"
          },
          "dataType": {
            "type": "string",
            "description": "Any data type returned from the data source (read only)"
          },
          "columnDefault": {
            "type": "string",
            "description": "Any column default returned from the data source (read only)"
          },
          "nullable": {
            "type": "boolean",
            "description": "Whether the column is nullable or not (read only)",
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Any description set for this column (read only)"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRepresentation"
            }
          }
        },
        "description": "A column from a catalog (read only)"
      },
      "FieldViolation": {
        "required": [
          "description",
          "field"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name"
          },
          "description": {
            "type": "string",
            "description": "Description of the violation"
          }
        },
        "description": "Field violations (read only)"
      },
      "RowFilter": {
        "required": [
          "created",
          "description",
          "expression",
          "modified",
          "name",
          "rowFilterId",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "rowFilterId": {
            "type": "string",
            "description": "Row Filter ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Row Filter name (read only)"
          },
          "expression": {
            "type": "string",
            "description": "Row Filter expression (read only)"
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Created on (read only)"
          },
          "modified": {
            "format": "date-time",
            "type": "string",
            "description": "Modified on (read only)"
          }
        },
        "description": "A row filter"
      },
      "GrantKindAndPrivileges": {
        "required": [
          "grantKind",
          "privilege"
        ],
        "properties": {
          "grantKind": {
            "type": "string",
            "description": "Grant kind (read only)",
            "enum": [
              "Allow",
              "Deny"
            ]
          },
          "privilege": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Privileges (read only)"
            }
          }
        },
        "description": "Privileges (read only)"
      },
      "Link": {
        "required": [
          "name",
          "uri"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the link (read only)"
          },
          "uri": {
            "type": "string",
            "description": "The link URI (read only)"
          }
        },
        "description": "Any links set for this schema (read only)"
      },
      "PrivilegePaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Privilege"
            }
          }
        }
      },
      "Catalog": {
        "required": [
          "catalogId",
          "catalogName"
        ],
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "Catalog ID (read only)"
          },
          "catalogName": {
            "type": "string",
            "description": "Catalog name (read only)"
          }
        },
        "description": "A catalog (read only)"
      },
      "Principal": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Principal ID"
          },
          "type": {
            "type": "string",
            "description": "Principal type",
            "enum": [
              "User",
              "Role",
              "Group"
            ]
          }
        },
        "description": "Principal (read only)"
      },
      "User": {
        "required": [
          "allRoles",
          "createdOn",
          "directlyGrantedRoles",
          "email",
          "scimManaged",
          "syncToken",
          "userId"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "userId": {
            "type": "string",
            "description": "User ID (read only)"
          },
          "email": {
            "type": "string",
            "description": "User email (read only)"
          },
          "defaultRoleId": {
            "type": "string",
            "description": "Default role id (read only)"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date (read only)"
          },
          "scimManaged": {
            "type": "boolean",
            "description": "SCIM managed (read only)",
            "nullable": false
          },
          "directlyGrantedRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleGrant"
            }
          },
          "allRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleGrant"
            }
          }
        },
        "description": "A user"
      },
      "Role": {
        "required": [
          "allRoles",
          "createdOn",
          "directlyGrantedRoles",
          "modifiedOn",
          "roleId",
          "roleName",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "roleId": {
            "type": "string",
            "description": "Role ID (read only)"
          },
          "roleName": {
            "type": "string",
            "description": "Role name (read only)"
          },
          "roleDescription": {
            "type": "string",
            "description": "Role description (read only)"
          },
          "owningRole": {
            "type": "string",
            "description": "Owning role (read only)"
          },
          "directlyGrantedRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleGrant"
            }
          },
          "allRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleGrant"
            }
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date (read only)"
          },
          "modifiedOn": {
            "format": "date-time",
            "type": "string",
            "description": "Modified date (read only)"
          }
        },
        "description": "A role"
      },
      "NewRole": {
        "required": [
          "grantToCreatingRole",
          "roleName"
        ],
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Role name (read only)"
          },
          "roleDescription": {
            "type": "string",
            "description": "Role description (read only)"
          },
          "grantToCreatingRole": {
            "type": "boolean",
            "description": "Grant to creating role (read only)",
            "nullable": false
          }
        },
        "description": "A role"
      },
      "Cluster": {
        "required": [
          "batchCluster",
          "catalogRefs",
          "cloudRegionId",
          "clusterId",
          "maxWorkers",
          "minWorkers",
          "name",
          "syncToken",
          "warpResiliencyEnabled",
          "warpSpeedCluster"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "clusterId": {
            "type": "string",
            "description": "Cluster ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Cluster name (read only)"
          },
          "cloudRegionId": {
            "type": "string",
            "description": "Cloud region ID (read only)"
          },
          "catalogRefs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Cluster attached catalog IDs (read only)"
            }
          },
          "idleStopMinutes": {
            "format": "int32",
            "type": "integer",
            "description": "Idle stop duration (in minutes) (read only)",
            "nullable": false
          },
          "batchCluster": {
            "type": "boolean",
            "description": "Supports resource intensive query processing mode (read only)",
            "nullable": false
          },
          "warpSpeedCluster": {
            "type": "boolean",
            "description": "Supports warp speed mode (read only)",
            "nullable": false
          },
          "minWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Minimum worker count (read only)",
            "nullable": false
          },
          "maxWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Maximum worker count (read only)",
            "nullable": false
          },
          "warpResiliencyEnabled": {
            "type": "boolean",
            "description": "Warp-Speed resiliency enable (read only)",
            "nullable": false
          },
          "clusterState": {
            "type": "string",
            "description": "Cluster state (read only)"
          },
          "trinoUri": {
            "type": "string",
            "description": "Connection URL (read only)"
          }
        },
        "description": "A Trino cluster"
      },
      "NewTag": {
        "required": [
          "color",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name (read only)"
          },
          "color": {
            "type": "string",
            "description": "Tag color (read only)"
          },
          "description": {
            "type": "string",
            "description": "comment (read only)"
          }
        },
        "description": "A tag"
      },
      "NewServiceAccountPassword": {
        "properties": {
          "description": {
            "type": "string",
            "description": "Service account password description (read only)"
          }
        },
        "description": "A service account password"
      },
      "RoleGrant": {
        "required": [
          "adminOption",
          "principal",
          "roleId",
          "roleName"
        ],
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Role name"
          },
          "roleId": {
            "type": "string",
            "description": "Role ID"
          },
          "principal": {
            "$ref": "#/components/schemas/Principal"
          },
          "adminOption": {
            "type": "boolean",
            "description": "Admin option",
            "nullable": false
          }
        },
        "description": "Directly granted roles (read only)"
      },
      "ServiceAccountPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/ServiceAccount"
            }
          }
        }
      },
      "ResourceInfo": {
        "required": [
          "description",
          "resourceName"
        ],
        "properties": {
          "resourceName": {
            "type": "string",
            "description": "Name of the resource (read only)"
          },
          "description": {
            "type": "string",
            "description": "Violation description (read only)"
          }
        },
        "description": "Resource failure or inconsistency (read only)"
      },
      "PolicyScope": {
        "required": [
          "entityId",
          "entityKind",
          "rowFilters"
        ],
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Entity ID (read only)"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind (read only)",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name (read only)"
          },
          "tableName": {
            "type": "string",
            "description": "Table name (read only)"
          },
          "columnName": {
            "type": "string",
            "description": "Column name (read only)"
          },
          "privileges": {
            "$ref": "#/components/schemas/GrantKindAndPrivileges"
          },
          "rowFilters": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Row filters (read only)"
            }
          },
          "columnMask": {
            "type": "string",
            "description": "Column mask (read only)"
          }
        },
        "description": "Policy scopes (read only)"
      },
      "PreconditionFailure": {
        "required": [
          "violations"
        ],
        "properties": {
          "violations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Violation"
            }
          }
        },
        "description": "Required precondition was not met (read only)"
      },
      "NewPolicy": {
        "required": [
          "description",
          "name",
          "predicate",
          "roleId",
          "scopes"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "description": "Enabling role id (read only)"
          },
          "name": {
            "type": "string",
            "description": "Policy name (read only)"
          },
          "predicate": {
            "type": "string",
            "description": "Policy predicate (read only)"
          },
          "description": {
            "type": "string",
            "description": "Policy description (read only)"
          },
          "expiration": {
            "format": "date-time",
            "type": "string",
            "description": "Policy expiration (read only)"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyScope"
            }
          }
        },
        "description": "A new policy"
      },
      "PolicyPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          }
        }
      },
      "UpdateColumnMaskPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Column mask name"
          },
          "expression": {
            "type": "string",
            "description": "Column mask expression"
          },
          "columnMaskType": {
            "type": "string",
            "description": "Column mask type",
            "enum": [
              "Any",
              "Integer",
              "Boolean",
              "Date",
              "Decimal",
              "Real",
              "Double",
              "Timestamp",
              "TimestampWithTimeZone",
              "Time",
              "TimeWithTimeZone",
              "Varbinary",
              "Varchar"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "description": "Update a column mask"
      },
      "SchemaPaginated": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Schema"
            }
          }
        }
      }
    }
  }
}
